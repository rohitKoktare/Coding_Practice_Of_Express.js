app.js

const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");

const app = express();
app.use(express.json());
const dbPath = path.join(__dirname, "covid19India.db");

let db = null;
const initializedDbAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("server is running at http://localhost:3000/");
    });
  } catch (error) {
    console.log(`Db Error: ${error.message}`);
    process.exit(1);
  }
};
initializedDbAndServer();

//Conversion of Snake To Camel

const snakeToCamel = (each) => {
  return {
    stateId: each.state_id,
    stateName: each.state_name,
    population: each.population,
  };
};

// Return the list of all states in table
app.get("/states/", async (request, response) => {
  const getQuery = `
    select * from state;`;
  const result = await db.all(getQuery);
  response.send(result.map((each) => snakeToCamel(each)));
  console.log("result");
});
// Get state based On ID API

app.get("/states/:stateId/", async (request, response) => {
  const { stateId } = request.params;
  const getQuery = `select * from state where state_id = ${stateId}`;
  const result = await db.get(getQuery);
  response.send(snakeToCamel(result));
  console.log(result);
});

// camelCaseTo_snake_case

const cameltosnake = (each) => {
  return {
    district_name: each.districtName,
    state_id: each.stateId,
    cases: each.cases,
    cured: each.cured,
    active: each.active,
    deaths: each.deaths,
  };
};

// API for post in district table

app.post("/districts/", async (request, response) => {
  const distData = request.body;
  const { districtName, stateId, cases, cured, active, deaths } = distData;
  const getQuery = `insert into district 
  (district_name, state_id, cases, cured, active, deaths) values 
  ("${districtName}", ${stateId}, ${cases}, ${cured}, ${active}, ${deaths});`;
  const result = await db.run(getQuery);
  const distId = request.lastId;
  console.log(result, distId);
  response.send("District Successfully Added");
});

// snake_case_toCamelCase for dist
const snakeToCamelForDist = (each) => {
  return {
    districtId: each.district_id,
    districtName: each.district_name,
    stateId: each.state_id,
    cases: each.cases,
    cured: each.cured,
    active: each.active,
    deaths: each.deaths,
  };
};
//Returns a district based on the district ID

app.get("/districts/:districtId/", async (request, response) => {
  const { districtId } = request.params;
  const getQuery = `select * from district where district_id = ${districtId}; `;
  const result = await db.get(getQuery);
  console.log(result);
  response.send(snakeToCamelForDist(result));
});

// DELETE Dist API

app.delete("/districts/:districtId/", async (request, response) => {
  const { districtId } = request.params;
  const getQuery = `delete from district where district_id = ${districtId}`;
  const result = await db.run(getQuery);
  console.log(result);
  response.send("District Removed");
});
// Update API
app.put("/districts/:districtId/", async (request, response) => {
  const { districtId } = request.params;
  const { districtName, stateId, cases, cured, active, deaths } = request.body;
  const getQuery = `
  update district 
  set
  district_name = "${districtName}",
  state_id = ${stateId},
  cases =  ${cases},
  cured = ${cured},
  active = ${active},
  deaths = ${deaths}
  where district_id = ${districtId};`;
  const result = await db.run(getQuery);
  console.log(result);
  response.send("District Details Updated");
});

// calculate total API

app.get("/states/:stateId/stats/", async (request, response) => {
  const { stateId } = request.params;
  const getQuery = `
    select sum(cases) as totalCases,
    sum(cured) as totalCured,
    sum(active) as totalActive,
    sum(deaths) as totalDeaths
    from district where state_id = ${stateId};`;
  const result = await db.get(getQuery);
  console.log(result);
  response.send(result);
});
//get State Name
const getStateName = (each) => {
  return {
    stateName: each.state_name,
  };
};
// get Dist API
app.get("/districts/:districtId/details/", async (request, response) => {
  const { districtId } = request.params;
  const getQuery = `
  select state_name from state 
  inner join district on district.state_id = state.state_id;`;
  const result = await db.get(getQuery);
  response.send(getStateName(result));
});
module.exports = app;
#################################

GET http://localhost:3000/states/

###
GET http://localhost:3000/states/19/

###
POST http://localhost:3000/districts/
Content-Type: application/json

{
  "districtName": "Bagalkot",
  "stateId": 3,
  "cases": 2323,
  "cured": 2000,
  "active": 315,
  "deaths": 8
}

###
GET http://localhost:3000/districts/322

###
DELETE http://localhost:3000/districts/322

###
PUT http://localhost:3000/districts/24
Content-Type: application/json

{
  "districtName": "Bagalkot",
  "stateId": 3,
  "cases": 2323,
  "cured": 2000,
  "active": 315,
  "deaths": 8
}

###
GET http://localhost:3000/states/33/stats/

###
GET http://localhost:3000/districts/22/details/
