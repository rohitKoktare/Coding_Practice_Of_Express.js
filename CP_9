const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");
const bcrypt = require("bcrypt");

const app = express();
app.use(express.json());
const dbPath = path.join(__dirname, "userData.db");

let db = null;
const initializedDbAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("server is running at http://localhost:3000/");
    });
  } catch (error) {
    console.log(`Db Error: ${error.message}`);
    process.exit(1);
  }
};
initializedDbAndServer();
// API 1

app.post("/register", async (request, response) => {
  const { username, name, password, gender, location } = request.body;
  const userNameSearchQuery = `select * from user where 
    username = "${username}"`;
  const hashedPassword = await bcrypt.hash(password, 10);
  const result = await db.get(userNameSearchQuery);
  console.log(password);
  console.log(result);
  console.log(password.length);
  if (result !== undefined) {
    response.status(400);
    response.send("User already exists");
  } else if (password.length < 5) {
    response.status(400);
    response.send("Password is too short");
  } else {
    const getQuery = `insert into 
            user 
            (username, name, password, gender, location)
            values 
            ('${username}', '${name}', '${hashedPassword}','${gender}' ,'${location}');`;
    const result = await db.run(getQuery);
    response.send("User created successfully");
  }
});

app.post("/login", async (request, response) => {
  const { username, password } = request.body;
  console.log(username, password);
  const userNameSearchQuery = `select * from user where 
    username = "${username}";`;
  const result = await db.get(userNameSearchQuery);

  if (result === undefined) {
    response.status(400);
    response.send("Invalid user");
  } else {
    const isCorrectPass = await bcrypt.compare(password, result.password);
    if (isCorrectPass) {
      response.status(200);
      response.send("Login success!");
    } else {
      response.status(400);
      response.send("Invalid password");
    }
  }
  console.log(result);
});

//API 3
app.put("/change-password", async (request, response) => {
  const { username, oldPassword, newPassword } = request.body;
  const getData = `select * from user where username = "${username}";`;
  const userData = await db.get(getData);
  const isPassCorrect = await bcrypt.compare(oldPassword, userData.password);
  if (isPassCorrect) {
    if (newPassword.length < 5) {
      response.status(400);
      response.send("Password is too short");
    } else {
      response.status(200);
      response.send("Password updated");
    }
  } else {
    response.status(400);
    response.send("Invalid current password");
  }
  console.log(username, oldPassword, newPassword);
  console.log(userData);
});

module.exports = app;

##############################
POST http://localhost:3000/register
Content-Type: application/json

{
  "username": "adam_richard",
  "name": "Adam Richard",
  "password": "richard_567",
  "gender": "male",
  "location": "Detroit"
}
###
POST http://localhost:3000/login
Content-Type: application/json

{
  "username": "adam_richard",
  "password": "richard@123"
}

###
PUT  http://localhost:3000/change-password
Content-Type: application/json

{
  "username": "adam_richard",
  "oldPassword": "richard_567",
  "newPassword": "richard@123"
}
