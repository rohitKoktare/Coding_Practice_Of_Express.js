const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");
const app = express();
app.use(express.json());
const dbPath = path.join(__dirname, "todoApplication.db");
let db = null;
const initializeDbAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("Server is Running at http://localhost:3000");
    });
  } catch (error) {
    console.log(`Db Error : ${error.message}`);
    process.exit(1);
  }
};
initializeDbAndServer();

// first API
app.get("/todos/", async (request, response) => {
  const { status, priority, search_q } = request.query;
  // const getQuery = `select * from todo
  //where status = "${status}";`;
  let getQuery = null;
  switch (true) {
    case status != undefined && priority == undefined:
      getQuery = `select * from todo where status = "${status}";`;
      console.log(status);
      break;
    case priority != undefined && status != undefined:
      getQuery = `select * from todo where priority = "${priority}" AND 
      status = "${status}";`;
      console.log(status);
      console.log("both");
      console.log(priority);
      break;
    case priority != undefined:
      getQuery = `select * from todo where priority = "${priority}";`;
      console.log(priority);
      console.log("priority");
      break;
    default:
      getQuery = `select * from todo where todo LIKE '%${search_q}%';`;
      console.log(search_q);
      break;
  }

  const result = await db.all(getQuery);
  console.log(result);
  response.send(result);
  /*
  console.log(status);
  console.log(priority);
  console.log(search_q);
  
  
  */
});
//SECOND API

app.get("/todos/:todoId/", async (request, response) => {
  const { todoId } = request.params;
  const getQuery = `select * from todo where id = ${todoId};`;
  const result = await db.get(getQuery);
  response.send(result);
  console.log(result);
});
//Done
//API 3
app.post("/todos/", async (request, response) => {
  const requestBody = request.body;
  const { id, todo, priority, status } = requestBody;
  const getQuery = `
  insert into todo
  ( id , todo, priority, status ) 
  values 
  (${id}, "${todo}", "${priority}", "${status}");`;
  const result = await db.run(getQuery);
  console.log(result);
  response.send("Todo Successfully Added");
});
// Done
//API 5
app.delete("/todos/:todoId/", async (request, response) => {
  const { todoId } = request.params;
  const getQuery = `delete from todo where id = ${todoId};`;
  const result = await db.run(getQuery);
  response.send("Todo Deleted");
});
//Done
// API 4
app.put("/todos/:todoId/", async (request, response) => {
  const { status, priority, todo } = request.body;
  let getQuery = null;
  let result = null;
  switch (true) {
    case status != undefined:
      getQuery = `update todo set 
      status = "${status}"`;
      result = await db.run(getQuery);
      response.send("Status Updated");
      console.log(getQuery);
      console.log("status");
      break;
    case priority != undefined:
      getQuery = `update todo set 
      priority = "${priority}"`;
      result = await db.run(getQuery);
      response.send("Priority Updated");
      break;
    case todo != undefined:
      getQuery = `update todo set 
      priority = "${todo}"`;
      result = await db.run(getQuery);
      response.send("Todo Updated");
      break;
    default:
      console.log("UO");
      break;
  }
  //
  //console.log(status, priority, todo);
  //console.log(result);
});

module.exports = app;


################
GET http://localhost:3000/todos/?search_q=Play

###
GET http://localhost:3000/todos/?priority=HIGH&status=IN%20PROGRESS
###
GET http://localhost:3000/todos/?priority=HIGH
###
GET http://localhost:3000/todos/?status=TO%20DO
###
GET http://localhost:3000/todos/4/
###
POST  http://localhost:3000/todos/
Content-Type: application/json

{
  "id": 4,
  "todo": "Play volleyball",
  "priority": "MEDIUM",
  "status": "DONE"
}
###
DELETE  http://localhost:3000/todos/10/

###
PUT http://localhost:3000/todos/1/
Content-Type: application/json

{
      "status": "DONE"
    }
    
