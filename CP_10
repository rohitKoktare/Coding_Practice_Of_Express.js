const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");

const app = express();
app.use(express.json());
const dbPath = path.join(__dirname, "covid19IndiaPortal.db");

let db = null;
const initializedDbAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("server is running at http://localhost:3000/");
    });
  } catch (error) {
    console.log(`Db Error: ${error.message}`);
    process.exit(1);
  }
};
initializedDbAndServer();

const authenticateToken = (request, response, next) => {
  let jwtToken;
  const authHeader = request.headers["authorization"];
  if (authHeader !== undefined) {
    jwtToken = authHeader.split(" ")[1];
  }
  if (jwtToken === undefined) {
    response.status(401);
    response.send("Invalid JWT Token");
  } else {
    jwt.verify(jwtToken, "MY_SECRET_TOKEN", async (error, payload) => {
      if (error) {
        response.status(401);
        response.send("Invalid JWT Token");
      } else {
        request.username = payload.username;
        next();
      }
    });
  }
};
// API 1 Login
app.post("/login", async (request, response) => {
  const { username, password } = request.body;
  console.log(username, password);
  const userNameSearchQuery = `select * from user where 
    username = "${username}";`;
  const result = await db.get(userNameSearchQuery);

  if (result === undefined) {
    response.status(400);
    response.send("Invalid user");
  } else {
    const isCorrectPass = await bcrypt.compare(password, result.password);
    if (isCorrectPass) {
      const payload = { username: username };
      const jwtToken = jwt.sign(payload, "MY_SECRET_TOKEN");
      response.status(200);
      response.send({ jwtToken });
    } else {
      response.status(400);
      response.send("Invalid password");
    }
  }
  console.log(result);
});

// API 2
/*
 */
app.get("/states/", authenticateToken, async (request, response) => {
  const getQuery = `select state_id as stateId, 
  state_name as stateName ,
   population as population from state;`;
  const result = await db.all(getQuery);
  response.send(result);
});

// API 3
app.get("/states/:stateId/", authenticateToken, async (request, response) => {
  const { stateId } = request.params;
  const getQuery = `select state_id as stateId, 
  state_name as stateName ,
   population as population from state where state_id = ${stateId};`;
  const result = await db.get(getQuery);
  response.status(200);
  response.send(result);
  console.log(result);
});

// API 4
app.post("/districts/", authenticateToken, async (request, response) => {
  const distData = request.body;
  const { districtName, stateId, cases, cured, active, deaths } = distData;
  const getQuery = `insert into district 
  (district_name, state_id, cases, cured, active, deaths) values 
  ("${districtName}", ${stateId}, ${cases}, ${cured}, ${active}, ${deaths});`;
  const result = await db.run(getQuery);
  const distId = request.lastId;
  console.log(result, distId);
  response.send("District Successfully Added");
});
// API 5
app.get(
  "/districts/:districtId/",
  authenticateToken,
  async (request, response) => {
    const { districtId } = request.params;
    const getQuery = `select district_id as districtId, 
  district_name as districtName,
  state_id as stateId,
  cases as cases,
  cured as cured,
  active as active,
  deaths as deaths from district where district_id = ${districtId}; `;
    const result = await db.get(getQuery);
    console.log(result);
    response.send(result);
  }
);

//API 6
app.delete(
  "/districts/:districtId/",
  authenticateToken,
  async (request, response) => {
    const { districtId } = request.params;
    const getQuery = `delete from district where district_id = ${districtId}`;
    const result = await db.run(getQuery);
    console.log(result);
    response.send("District Removed");
  }
);

// API 7
app.put(
  "/districts/:districtId/",
  authenticateToken,
  async (request, response) => {
    const { districtId } = request.params;
    const {
      districtName,
      stateId,
      cases,
      cured,
      active,
      deaths,
    } = request.body;
    const getQuery = `
  update district 
  set
  district_name = "${districtName}",
  state_id = ${stateId},
  cases =  ${cases},
  cured = ${cured},
  active = ${active},
  deaths = ${deaths}
  where district_id = ${districtId};`;
    const result = await db.run(getQuery);
    console.log(result);
    response.send("District Details Updated");
  }
);
// API 8
app.get(
  "/states/:stateId/stats/",
  authenticateToken,
  async (request, response) => {
    const { stateId } = request.params;
    const getQuery = `
    select sum(cases) as totalCases,
    sum(cured) as totalCured,
    sum(active) as totalActive,
    sum(deaths) as totalDeaths
    from district where state_id = ${stateId};`;
    const result = await db.get(getQuery);
    console.log(result);
    response.send(result);
  }
);
module.exports = app;
####################################################################################
POST http://localhost:3000/login/
Content-Type: application/json

{
  "username": "christopher_phillips",
  "password": "christy@123"
}

###
GET http://localhost:3000/states/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNocmlzdG9waGVyX3BoaWxsaXBzIiwiaWF0IjoxNjc3MDQ4ODgyfQ.18Cq_qX8oKAD3rsJguT1SI9dpSkuo8X0mNtnQe6i-Ek

###
GET http://localhost:3000/states/1/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNocmlzdG9waGVyX3BoaWxsaXBzIiwiaWF0IjoxNjc3MDQ4ODgyfQ.18Cq_qX8oKAD3rsJguT1SI9dpSkuo8X0mNtnQe6i-Ek

###

POST http://localhost:3000/districts/
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNocmlzdG9waGVyX3BoaWxsaXBzIiwiaWF0IjoxNjc3MDQ4ODgyfQ.18Cq_qX8oKAD3rsJguT1SI9dpSkuo8X0mNtnQe6i-Ek

{
  "districtName": "Bagalkot",
  "stateId": 3,
  "cases": 2323,
  "cured": 2000,
  "active": 315,
  "deaths": 8
}
###
GET http://localhost:3000/districts/322/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNocmlzdG9waGVyX3BoaWxsaXBzIiwiaWF0IjoxNjc3MDQ4ODgyfQ.18Cq_qX8oKAD3rsJguT1SI9dpSkuo8X0mNtnQe6i-Ek

###
DELETE  http://localhost:3000/districts/322/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNocmlzdG9waGVyX3BoaWxsaXBzIiwiaWF0IjoxNjc3MDQ4ODgyfQ.18Cq_qX8oKAD3rsJguT1SI9dpSkuo8X0mNtnQe6i-Ek
###
PUT  http://localhost:3000/districts/322/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNocmlzdG9waGVyX3BoaWxsaXBzIiwiaWF0IjoxNjc3MDQ4ODgyfQ.18Cq_qX8oKAD3rsJguT1SI9dpSkuo8X0mNtnQe6i-Ek
###
GET  http://localhost:3000/states/:stateId/stats/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNocmlzdG9waGVyX3BoaWxsaXBzIiwiaWF0IjoxNjc3MDQ4ODgyfQ.18Cq_qX8oKAD3rsJguT1SI9dpSkuo8X0mNtnQe6i-Ek
###
